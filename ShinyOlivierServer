#
# This is the server logic of a Shiny web application. You can run the 
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
# 
#    http://shiny.rstudio.com/
#

## LOAD PACKAGES ####

library(ggplot2)
library(shiny)

## READ IN DATA AND ORGANIZE ####
# Data for analysis
design_matrix1 <- read.csv('/Users/oliverousseau/Documents/BigData for Business/Cours/Oreal Data Camp/datas/ShinyData/design_matrix1.csv', row.names=1)
design_matrix2 <- read.csv('/Users/oliverousseau/Documents/BigData for Business/Cours/Oreal Data Camp/datas/ShinyData/design_matrix2.csv', row.names=1)

design_matrix1$cluster <- 1
design_matrix1[design_matrix1$NbEmployes > 3, 'cluster'] <- 2
design_matrix1[design_matrix1$NbEmployes > 7, 'cluster'] <- 3


PanierProduits <- design_matrix1[,c('SIRET', 'PanierProduits')]

## MAKE SERVER OUTPUTS
shinyServer <- function(input, output){
  
  # Make plot
  output$graph = renderPlot({
    point_siret <- data.frame(x = design_matrix1[design_matrix1$SIRET == input$SIRET, "PanierProduits", ], y = design_matrix1[design_matrix1$SIRET == input$SIRET, "CA_mois"])
    point_siret_2015 <- data.frame(x = design_matrix2[design_matrix2$SIRET == input$SIRET, "PanierProduits"], y = design_matrix1[design_matrix1$SIRET == input$SIRET, "CA_mois"])
    
    
    design_graph <- design_matrix1[,c('CA_mois', 'PanierProduits', 'SIRET', 'cluster', 'CodePostal', 'NbEmployes', 'PrixColox')]
    
    # Cluster
    if(input$cluster == 1){
      cluster0 <- design_graph[design_graph$SIRET == input$SIRET,'cluster']
      design_graph <- design_graph[design_graph$cluster == cluster0,] 
    }
    
    CodePostal0 <- design_graph[design_graph$SIRET == input$SIRET,'CodePostal']
    
    design_graph <- design_graph[design_graph$NbEmployes >= input$Nb[1] & design_graph$NbEmployes <= input$Nb[2] & design_graph$PrixColox >= input$Prix[1] & design_graph$PrixColox <= input$Prix[2] & design_graph$PanierProduits >= input$x[1] & design_graph$PanierProduits <= input$x[2], ]
    
    ggplot(data = design_graph)+ geom_smooth(aes(x=PanierProduits, y=CA_mois), color = 'black', linetype = 4) + geom_point(aes(x=PanierProduits, y=CA_mois)) + scale_x_continuous(limits = c(input$x[1],input$x[2])) + scale_y_continuous(limits = c(input$y[1],input$y[2])) + geom_smooth(aes(x=PanierProduits, y=CA_mois), data = design_matrix1, size = 2) + geom_point(aes(x = x, y = y), data = point_siret, color = 'red', size = 10) + geom_point(aes(x = x, y = y), data = point_siret_2015, color = 'orange', size = 5) + geom_point(aes(x = PanierProduits, y=CA_mois), color = input$CodePostal, data = subset(design_graph, CodePostal == CodePostal0), size = 3)
  
    })
  
  output$density = renderPlot({
    point_siret <- data.frame(x = design_matrix1[design_matrix1$SIRET == input$SIRET, "PanierProduits"], y = design_matrix1[design_matrix1$SIRET == input$SIRET, "CA_mois"])
    point_siret_2015 <- data.frame(x = design_matrix2[design_matrix2$SIRET == input$SIRET, "PanierProduits"], y = design_matrix1[design_matrix1$SIRET == input$SIRET, "CA_mois"])
    
    design_graph <- design_matrix1[,c('CA_mois', 'PanierProduits', 'SIRET', 'cluster', 'CodePostal', 'NbEmployes', 'PrixColox')]
    
    # Cluster
    if(input$cluster == 1){
      cluster0 <- design_graph[design_graph$SIRET == input$SIRET,'cluster']
      design_graph <- design_graph[design_graph$cluster == cluster0,] 
    }
    
    CodePostal0 <- design_graph[design_graph$SIRET == input$SIRET,'CodePostal']
    
    design_graph <- design_graph[design_graph$NbEmployes >= input$Nb[1] & design_graph$NbEmployes <= input$Nb[2] & design_graph$PrixColox >= input$Prix[1] & design_graph$PrixColox <= input$Prix[2] & design_graph$PanierProduits >= input$x[1] & design_graph$PanierProduits <= input$x[2], ]
    
    ggplot(data = design_graph) + geom_density(aes(x=design_graph[,input$Densité]), color = 'red', linetype = 3, size = 2) + geom_density(aes(x=design_matrix1[,input$Densité]), data = design_matrix1, color = 'blue', size =1) + geom_vline(xintercept = design_matrix1[design_matrix1$SIRET == input$SIRET, input$Densité], color = 'red') + geom_vline(xintercept = design_matrix2[design_matrix2$SIRET == input$SIRET, input$Densité], color = 'orange')
    

  })
  
}
